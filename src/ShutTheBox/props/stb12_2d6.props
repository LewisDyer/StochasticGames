const int k;

// check the game always eventually terminates
<<p1>>Pmax=? [ F game_over ]

// probability that score is k
<<p1>>Pmin=? [ F game_over&score=k ]
// probability that score is k
<<p1>>Pmax=? [ F game_over&score=k ]

// expected difference in prob of score = k
<<p1>>Pmax=? [ F game_over&score=k ] - <<p1>>Pmin=? [ F game_over&score=k ]
// probability that score is at least k
<<p1>>Pmin=? [ F game_over&score<=k ]

// probability that score is at least k
<<p1>>Pmax=? [ F game_over&score<=k ]

// Min and max expected boards
<<p1>>R{"total_boards"}min=? [ F game_over ]
<<p1>>R{"total_boards"}max=? [ F game_over ]

// min rolls
<<p1>>R{"no_rolls"}max=? [ F game_over ]

// max rolls
<<p1>>R{"no_rolls"}min=? [ F game_over ]

// Probability of 1 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b1=1&score=k ]

// Probability of 2 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b2=1&score=k ]

// Probability of 3 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b3=1&score=k ]

// Probability of 4 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b4=1&score=k ]

// Probability of 5 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b5=1&score=k ]

// Probability of 6 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b6=1&score=k ]

// Probability of 7 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b7=1&score=k ]

// Probability of 8 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b8=1&score=k ]

// Probability of 9 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b9=1&score=k ]

// Probability of 10 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b10=1&score=k ]

// Probability of 11 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b11=1&score=k ]

// Probability of 12 being covered given the score is k
<<p1>>Pmin=? [ F game_over&b12=1&score=k ]


