// Liar's Dice
pomdp

observables
	p1_d1, p1_d2, p1_d3,
	p1_bid_face, p1_bid_quat, p2_bid_face, p2_bid_quat,
	phase, made_challenge, challenge_correct
endobservables

formula current_bid_face = max(p1_bid_face, p2_bid_face);
formula current_bid_quat = max(p1_bid_quat, p2_bid_quat);

formula p1_1s = (p1_d1 = 1 ? 1 : 0) + (p1_d2 = 1 ? 1 : 0) + (p1_d3 = 1 ? 1 : 0);
formula p1_2s = (p1_d1 = 2 ? 1 : 0) + (p1_d2 = 2 ? 1 : 0) + (p1_d3 = 2 ? 1 : 0);
formula p1_3s = (p1_d1 = 3 ? 1 : 0) + (p1_d2 = 3 ? 1 : 0) + (p1_d3 = 3 ? 1 : 0);
formula p1_4s = (p1_d1 = 4 ? 1 : 0) + (p1_d2 = 4 ? 1 : 0) + (p1_d3 = 4 ? 1 : 0);
formula p1_5s = (p1_d1 = 5 ? 1 : 0) + (p1_d2 = 5 ? 1 : 0) + (p1_d3 = 5 ? 1 : 0);
formula p1_6s = (p1_d1 = 6 ? 1 : 0) + (p1_d2 = 6 ? 1 : 0) + (p1_d3 = 6 ? 1 : 0);

formula p2_1s = (p2_d1 = 1 ? 1 : 0) + (p2_d2 = 1 ? 1 : 0) + (p2_d3 = 1 ? 1 : 0);
formula p2_2s = (p2_d1 = 2 ? 1 : 0) + (p2_d2 = 2 ? 1 : 0) + (p2_d3 = 2 ? 1 : 0);
formula p2_3s = (p2_d1 = 3 ? 1 : 0) + (p2_d2 = 3 ? 1 : 0) + (p2_d3 = 3 ? 1 : 0);
formula p2_4s = (p2_d1 = 4 ? 1 : 0) + (p2_d2 = 4 ? 1 : 0) + (p2_d3 = 4 ? 1 : 0);
formula p2_5s = (p2_d1 = 5 ? 1 : 0) + (p2_d2 = 5 ? 1 : 0) + (p2_d3 = 5 ? 1 : 0);
formula p2_6s = (p2_d1 = 6 ? 1 : 0) + (p2_d2 = 6 ? 1 : 0) + (p2_d3 = 6 ? 1 : 0);

formula all_1s = p1_1s + p2_1s;
formula all_2s = p1_2s + p2_2s;
formula all_3s = p1_3s + p2_3s;
formula all_4s = p1_4s + p2_4s;
formula all_5s = p1_5s + p2_5s;
formula all_6s = p1_6s + p2_6s;

// nondeterministic player
module player1
	
	p1_d1 : [0..6] init 0;
	p1_d2 : [0..6] init 0;
	p1_d3 : [0..6] init 0;

	p1_bid_face : [0..7] init 0;
	p1_bid_quat : [0..6] init 0;

    [roll_die1] phase=0 & p1_1 = 0 -> 1/6: (p1_d1'=1)
                                    + 1/6: (p1_d2'=2)
                                    + 1/6: (p1_d3'=3)
                                    + 1/6: (p1_d4'=4)
                                    + 1/6: (p1_d5'=5)
                                    + 1/6: (p1_d6'=6);
    [roll_die2] phase=0 & p1_2 != 0 & p1_1 != 0 -> 1/6: (p1_d1'=1)
                                                 + 1/6: (p1_d2'=2)
                                                 + 1/6: (p1_d3'=3)
                                                 + 1/6: (p1_d4'=4)
                                                 + 1/6: (p1_d5'=5)
                                                 + 1/6: (p1_d6'=6);
    [roll_die3] phase=0 & p1_3 != 0 & p1_2 != 0 -> 1/6: (p1_d1'=1)
                                                 + 1/6: (p1_d2'=2)
                                                 + 1/6: (p1_d3'=3)
                                                 + 1/6: (p1_d4'=4)
                                                 + 1/6: (p1_d5'=5)
                                                 + 1/6: (p1_d6'=6);


    [p1_bid_init] phase=1 -> 1/3: (p1_bid_face' = p1_d1) & (p1_bid_quat' = 1)
                           + 1/3: (p1_bid_face' = p1_d2) & (p1_bid_quat' = 1)
                           + 1/3: (p1_bid_face' = p1_d3) & (p1_bid_quat' = 1);
	

