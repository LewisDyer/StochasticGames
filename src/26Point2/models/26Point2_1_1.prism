// Manual model for 26 Point 2
// 2 players, 4d6 each, 30 spaces.

csg

player p1
	 player1
endplayer

player p2
	 player2
endplayer


const int no_spaces; // goal space to win game

formula p1_end = p1_move > p1_pos;
formula p2_end = p2_move > p2_pos;
formula game_over = p1_end | p2_end;
formula max_space = max(p1_end_pos, p2_end_pos);

formula p1_pairs = ((p1_1s >= 2) ? 1 : 0) + ((p1_2s >= 2) ? 1 : 0) + ((p1_3s >= 2) ? 1 : 0) + ((p1_4s >= 2) ? 1 : 0);
formula p2_pairs = ((p2_1s >= 2) ? 1 : 0) + ((p2_2s >= 2) ? 1 : 0) + ((p2_3s >= 2) ? 1 : 0) + ((p2_4s >= 2) ? 1 : 0);

formula p1_bust = (p1_pairs >= 2) | (p1_1s >= 3) | (p1_2s >= 3) | (p1_3s >= 3) | (p1_4s >= 3);
formula p2_bust = (p2_pairs >= 2) | (p2_1s >= 3) | (p2_2s >= 3) | (p2_3s >= 3) | (p2_4s >= 3);

formula p1_move = p1_bust ? 0 : (1 * p1_1s + 2 * p1_2s + 3 * p1_3s + 4 * p1_4s);
formula p2_move = p2_bust ? 0 : (1 * p2_1s + 2 * p2_2s + 3 * p2_3s + 4 * p2_4s);

formula p1_end_pos = p1_pos + (p1_end ? no_spaces : 0);
formula p2_end_pos = p2_pos + (p2_end ? no_spaces : 0);


module player1

p1_pos : [0..no_spaces] init 0;
p1_chosen_dice : [1..4] init 1;

p1_1s : [0..4] init 0;
p1_2s : [0..4] init 0;
p1_3s : [0..4] init 0;
p1_4s : [0..4] init 0;

[p1_pick_dice] state=0 ->
	1/4 : (p1_chosen_dice' = 1) + 
	1/4 : (p1_chosen_dice' = 2) + 
	1/4 : (p1_chosen_dice' = 3) + 
	1/4 : (p1_chosen_dice' = 4);

[p1_roll_1_dice] state=1 & p1_chosen_dice=1 ->
1/4 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=0) + 
1/4 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=0) + 
1/4 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=0) + 
1/4 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=1);

[p1_roll_2_dice] state=1 & p1_chosen_dice=2 ->
1/16 : (p1_1s'=2) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=0) + 
2/16 : (p1_1s'=1) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=0) + 
2/16 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=0) + 
2/16 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=1) + 
1/16 : (p1_1s'=0) & (p1_2s'=2) & (p1_3s'=0) & (p1_4s'=0) + 
2/16 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=1) & (p1_4s'=0) + 
2/16 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=1) + 
1/16 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=2) & (p1_4s'=0) + 
2/16 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=1) + 
1/16 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=2);

[p1_roll_3_dice] state=1 & p1_chosen_dice=3 ->
1/64 : (p1_1s'=3) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=0) + 
3/64 : (p1_1s'=2) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=0) + 
3/64 : (p1_1s'=2) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=0) + 
3/64 : (p1_1s'=2) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=1) + 
3/64 : (p1_1s'=1) & (p1_2s'=2) & (p1_3s'=0) & (p1_4s'=0) + 
6/64 : (p1_1s'=1) & (p1_2s'=1) & (p1_3s'=1) & (p1_4s'=0) + 
6/64 : (p1_1s'=1) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=1) + 
3/64 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=2) & (p1_4s'=0) + 
6/64 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=1) + 
3/64 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=2) + 
1/64 : (p1_1s'=0) & (p1_2s'=3) & (p1_3s'=0) & (p1_4s'=0) + 
3/64 : (p1_1s'=0) & (p1_2s'=2) & (p1_3s'=1) & (p1_4s'=0) + 
3/64 : (p1_1s'=0) & (p1_2s'=2) & (p1_3s'=0) & (p1_4s'=1) + 
3/64 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=2) & (p1_4s'=0) + 
6/64 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=1) & (p1_4s'=1) + 
3/64 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=2) + 
1/64 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=3) & (p1_4s'=0) + 
3/64 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=2) & (p1_4s'=1) + 
3/64 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=2) + 
1/64 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=3);

[p1_roll_4_dice] state=1 & p1_chosen_dice=4 ->
1/256 : (p1_1s'=4) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=0) + 
4/256 : (p1_1s'=3) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=0) + 
4/256 : (p1_1s'=3) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=0) + 
4/256 : (p1_1s'=3) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=1) + 
6/256 : (p1_1s'=2) & (p1_2s'=2) & (p1_3s'=0) & (p1_4s'=0) + 
12/256 : (p1_1s'=2) & (p1_2s'=1) & (p1_3s'=1) & (p1_4s'=0) + 
12/256 : (p1_1s'=2) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=1) + 
6/256 : (p1_1s'=2) & (p1_2s'=0) & (p1_3s'=2) & (p1_4s'=0) + 
12/256 : (p1_1s'=2) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=1) + 
6/256 : (p1_1s'=2) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=2) + 
4/256 : (p1_1s'=1) & (p1_2s'=3) & (p1_3s'=0) & (p1_4s'=0) + 
12/256 : (p1_1s'=1) & (p1_2s'=2) & (p1_3s'=1) & (p1_4s'=0) + 
12/256 : (p1_1s'=1) & (p1_2s'=2) & (p1_3s'=0) & (p1_4s'=1) + 
12/256 : (p1_1s'=1) & (p1_2s'=1) & (p1_3s'=2) & (p1_4s'=0) + 
24/256 : (p1_1s'=1) & (p1_2s'=1) & (p1_3s'=1) & (p1_4s'=1) + 
12/256 : (p1_1s'=1) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=2) + 
4/256 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=3) & (p1_4s'=0) + 
12/256 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=2) & (p1_4s'=1) + 
12/256 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=2) + 
4/256 : (p1_1s'=1) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=3) + 
1/256 : (p1_1s'=0) & (p1_2s'=4) & (p1_3s'=0) & (p1_4s'=0) + 
4/256 : (p1_1s'=0) & (p1_2s'=3) & (p1_3s'=1) & (p1_4s'=0) + 
4/256 : (p1_1s'=0) & (p1_2s'=3) & (p1_3s'=0) & (p1_4s'=1) + 
6/256 : (p1_1s'=0) & (p1_2s'=2) & (p1_3s'=2) & (p1_4s'=0) + 
12/256 : (p1_1s'=0) & (p1_2s'=2) & (p1_3s'=1) & (p1_4s'=1) + 
6/256 : (p1_1s'=0) & (p1_2s'=2) & (p1_3s'=0) & (p1_4s'=2) + 
4/256 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=3) & (p1_4s'=0) + 
12/256 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=2) & (p1_4s'=1) + 
12/256 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=1) & (p1_4s'=2) + 
4/256 : (p1_1s'=0) & (p1_2s'=1) & (p1_3s'=0) & (p1_4s'=3) + 
1/256 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=4) & (p1_4s'=0) + 
4/256 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=3) & (p1_4s'=1) + 
6/256 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=2) & (p1_4s'=2) + 
4/256 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=1) & (p1_4s'=3) + 
1/256 : (p1_1s'=0) & (p1_2s'=0) & (p1_3s'=0) & (p1_4s'=4);


[p1_move_roll] state=2 -> (p1_pos' = mod(p1_pos + (p1_bust ? 0 : p1_move), no_spaces));

[p1_pick_wins] state=3 -> (p1_1s' = 0) & (p1_2s' = 0) & (p1_3s' = 0) & (p1_4s' = 0);

endmodule

module player2

p2_pos : [0..no_spaces] init 0;
p2_chosen_dice : [1..4] init 1;

p2_1s : [0..4] init 0;
p2_2s : [0..4] init 0;
p2_3s : [0..4] init 0;
p2_4s : [0..4] init 0;

[p2_pick_dice] state=0 ->
	1/4 : (p2_chosen_dice' = 1) + 
	1/4 : (p2_chosen_dice' = 2) + 
	1/4 : (p2_chosen_dice' = 3) + 
	1/4 : (p2_chosen_dice' = 4);

[p2_roll_1_dice] state=1 & p2_chosen_dice=1 ->
1/4 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=0) + 
1/4 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=0) + 
1/4 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=0) + 
1/4 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=1);

[p2_roll_2_dice] state=1 & p2_chosen_dice=2 ->
1/16 : (p2_1s'=2) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=0) + 
2/16 : (p2_1s'=1) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=0) + 
2/16 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=0) + 
2/16 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=1) + 
1/16 : (p2_1s'=0) & (p2_2s'=2) & (p2_3s'=0) & (p2_4s'=0) + 
2/16 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=1) & (p2_4s'=0) + 
2/16 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=1) + 
1/16 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=2) & (p2_4s'=0) + 
2/16 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=1) + 
1/16 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=2);

[p2_roll_3_dice] state=1 & p2_chosen_dice=3 ->
1/64 : (p2_1s'=3) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=0) + 
3/64 : (p2_1s'=2) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=0) + 
3/64 : (p2_1s'=2) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=0) + 
3/64 : (p2_1s'=2) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=1) + 
3/64 : (p2_1s'=1) & (p2_2s'=2) & (p2_3s'=0) & (p2_4s'=0) + 
6/64 : (p2_1s'=1) & (p2_2s'=1) & (p2_3s'=1) & (p2_4s'=0) + 
6/64 : (p2_1s'=1) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=1) + 
3/64 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=2) & (p2_4s'=0) + 
6/64 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=1) + 
3/64 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=2) + 
1/64 : (p2_1s'=0) & (p2_2s'=3) & (p2_3s'=0) & (p2_4s'=0) + 
3/64 : (p2_1s'=0) & (p2_2s'=2) & (p2_3s'=1) & (p2_4s'=0) + 
3/64 : (p2_1s'=0) & (p2_2s'=2) & (p2_3s'=0) & (p2_4s'=1) + 
3/64 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=2) & (p2_4s'=0) + 
6/64 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=1) & (p2_4s'=1) + 
3/64 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=2) + 
1/64 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=3) & (p2_4s'=0) + 
3/64 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=2) & (p2_4s'=1) + 
3/64 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=2) + 
1/64 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=3);

[p2_roll_4_dice] state=1 & p2_chosen_dice=4 ->
1/256 : (p2_1s'=4) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=0) + 
4/256 : (p2_1s'=3) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=0) + 
4/256 : (p2_1s'=3) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=0) + 
4/256 : (p2_1s'=3) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=1) + 
6/256 : (p2_1s'=2) & (p2_2s'=2) & (p2_3s'=0) & (p2_4s'=0) + 
12/256 : (p2_1s'=2) & (p2_2s'=1) & (p2_3s'=1) & (p2_4s'=0) + 
12/256 : (p2_1s'=2) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=1) + 
6/256 : (p2_1s'=2) & (p2_2s'=0) & (p2_3s'=2) & (p2_4s'=0) + 
12/256 : (p2_1s'=2) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=1) + 
6/256 : (p2_1s'=2) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=2) + 
4/256 : (p2_1s'=1) & (p2_2s'=3) & (p2_3s'=0) & (p2_4s'=0) + 
12/256 : (p2_1s'=1) & (p2_2s'=2) & (p2_3s'=1) & (p2_4s'=0) + 
12/256 : (p2_1s'=1) & (p2_2s'=2) & (p2_3s'=0) & (p2_4s'=1) + 
12/256 : (p2_1s'=1) & (p2_2s'=1) & (p2_3s'=2) & (p2_4s'=0) + 
24/256 : (p2_1s'=1) & (p2_2s'=1) & (p2_3s'=1) & (p2_4s'=1) + 
12/256 : (p2_1s'=1) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=2) + 
4/256 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=3) & (p2_4s'=0) + 
12/256 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=2) & (p2_4s'=1) + 
12/256 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=2) + 
4/256 : (p2_1s'=1) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=3) + 
1/256 : (p2_1s'=0) & (p2_2s'=4) & (p2_3s'=0) & (p2_4s'=0) + 
4/256 : (p2_1s'=0) & (p2_2s'=3) & (p2_3s'=1) & (p2_4s'=0) + 
4/256 : (p2_1s'=0) & (p2_2s'=3) & (p2_3s'=0) & (p2_4s'=1) + 
6/256 : (p2_1s'=0) & (p2_2s'=2) & (p2_3s'=2) & (p2_4s'=0) + 
12/256 : (p2_1s'=0) & (p2_2s'=2) & (p2_3s'=1) & (p2_4s'=1) + 
6/256 : (p2_1s'=0) & (p2_2s'=2) & (p2_3s'=0) & (p2_4s'=2) + 
4/256 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=3) & (p2_4s'=0) + 
12/256 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=2) & (p2_4s'=1) + 
12/256 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=1) & (p2_4s'=2) + 
4/256 : (p2_1s'=0) & (p2_2s'=1) & (p2_3s'=0) & (p2_4s'=3) + 
1/256 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=4) & (p2_4s'=0) + 
4/256 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=3) & (p2_4s'=1) + 
6/256 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=2) & (p2_4s'=2) + 
4/256 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=1) & (p2_4s'=3) + 
1/256 : (p2_1s'=0) & (p2_2s'=0) & (p2_3s'=0) & (p2_4s'=4);


[p2_move_roll] state=2 -> (p2_pos' = mod(p2_pos + (p2_bust ? 0 : p2_move), no_spaces));

[p2_pick_wins] state=3 -> (p2_1s' = 0) & (p2_2s' = 0) & (p2_3s' = 0) & (p2_4s' = 0);

endmodule


module board
    // Local state:
    // 0: choosing how many dice to roll
    // 1: rolling dice
    // 2: Moving (if allowed!)
    // 3: Deciding if there's a winner
    // 4: game over
    state : [0..4] init 0;
    
    winner : [0..2] init 0;

    [] state=0 -> (state'=1);
    [] state=1 -> (state'=2);
    [] state=2 -> (state'=3);
    [] state=3 & !game_over -> (state'=0);

    [] state=3 & game_over & p1_end_pos=max_space & !p2_end_pos=max_space -> (state'=4) & (winner'=1);
    [] state=3 & game_over & p2_end_pos=max_space & !p1_end_pos=max_space -> (state'=4) & (winner'=2);
    [] state=3 & game_over & p1_end_pos=max_space & p2_end_pos=max_space -> 0.5 : (state'=4) & (winner'=1) + 0.5 :(state'=4) & (winner'=2);
    
    [] state=4 -> (state'=4);

endmodule


label "p1_wins" = ((state=4) & (winner=1));
label "p2_wins" = ((state=4) & (winner=2));

label "game_over" = (state=4);

label "players_tie" = (state=4) & (p1_end_pos=p2_end_pos);

label "p1_bust" = p1_bust;
label "p2_bust" = p2_bust;

rewards "no_rounds"
	(state=1) : 1;
endrewards


rewards "p1_busts"
	(state=2) & (p1_bust) : 1;
endrewards


rewards "p2_busts"
	(state=2) & (p2_bust) : 1;
endrewards


