// Manual model for 26 Point 2
// 2 players, 4d6 each, 30 spaces.

csg

const int no_space; // goal space to win game
const int no_dice; // max no of dice players can roll a turn
const int no_sides; // number of sides per die

formula p1_end = p1_move > p1_pos;
formula p2_end = p2_move > p2_pos;
formula game_over = p1_end | p2_end;

formula p1_pairs = ((p1_1s >= 2) ? 1 : 0) + ((p1_2s >= 2) ? 1 : 0) + ((p1_3s >= 2) ? 1 : 0) + ((p1_4s >= 2) ? 1 : 0) + ((p1_5s >= 2) ? 1 : 0) + ((p1_6s >= 2) ? 1 : 0)
formula p2_pairs = ((p2_1s >= 2) ? 1 : 0) + ((p2_2s >= 2) ? 1 : 0) + ((p2_3s >= 2) ? 1 : 0) + ((p2_4s >= 2) ? 1 : 0) + ((p2_5s >= 2) ? 1 : 0) + ((p2_6s >= 2) ? 1 : 0)

formula p1_bust = (p1_pairs >= 2) | (p1_1s >= 3) | (p1_2s >= 3) | (p1_3s >= 3) | (p1_4s >= 3) | (p1_5s >= 3) | (p1_6s >= 3);
formula p2_bust = (p2_pairs >= 2) | (p2_1s >= 3) | (p2_2s >= 3) | (p2_3s >= 3) | (p2_4s >= 3) | (p2_5s >= 3) | (p2_6s >= 3);

formula p1_move = p1_bust ? 0 : (1 * p1_1s + 2 * p1_2s + 3 * p1_3s + 4 * p1_4s + 5 * p1_5s + 6 * p1_6s);
formula p2_move = p2_bust ? 0 : (1 * p2_1s + 2 * p2_2s + 3 * p2_3s + 4 * p2_4s + 5 * p2_5s + 6 * p2_6s);

formula p1_end_pos = p1_pos + (p1_end ? no_spaces : 0);
formula p2_end_pos = p2_pos + (p2_end ? no_spaces : 0);


