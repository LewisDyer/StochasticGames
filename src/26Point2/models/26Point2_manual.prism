// Manual model for 26 Point 2
// 2 players, 4d6 each, 30 spaces.

mdp

const int no_spaces = 100; // goal space to win game
const int no_dice = 4; // max no of dice players can roll a turn
const int no_sides = 6; // number of sides per die

formula p1_end = (p1_d1+p1_d2+p1_d3+p1_d4) > p1_pos;
formula p2_end = (p2_d1+p2_d2+p2_d3+p2_d4) > p2_pos;
formula game_over = p1_end | p2_end;

formula p1_1s = ((p1_d1=1) ? 1 : 0) + ((p1_d2=1) ? 1 : 0) + ((p1_d3=1) ? 1 : 0) + ((p1_d4=1) ? 1 : 0);
formula p1_2s = ((p1_d1=2) ? 1 : 0) + ((p1_d2=2) ? 1 : 0) + ((p1_d3=2) ? 1 : 0) + ((p1_d4=2) ? 1 : 0);
formula p1_3s = ((p1_d1=3) ? 1 : 0) + ((p1_d2=3) ? 1 : 0) + ((p1_d3=3) ? 1 : 0) + ((p1_d4=3) ? 1 : 0);
formula p1_4s = ((p1_d1=4) ? 1 : 0) + ((p1_d2=4) ? 1 : 0) + ((p1_d3=4) ? 1 : 0) + ((p1_d4=4) ? 1 : 0);
formula p1_5s = ((p1_d1=5) ? 1 : 0) + ((p1_d2=5) ? 1 : 0) + ((p1_d3=5) ? 1 : 0) + ((p1_d4=5) ? 1 : 0);
formula p1_6s = ((p1_d1=6) ? 1 : 0) + ((p1_d2=6) ? 1 : 0) + ((p1_d3=6) ? 1 : 0) + ((p1_d4=6) ? 1 : 0);

formula p2_1s = ((p2_d1=1) ? 1 : 0) + ((p2_d2=1) ? 1 : 0) + ((p2_d3=1) ? 1 : 0) + ((p2_d4=1) ? 1 : 0);
formula p2_2s = ((p2_d1=2) ? 1 : 0) + ((p2_d2=2) ? 1 : 0) + ((p2_d3=2) ? 1 : 0) + ((p2_d4=2) ? 1 : 0);
formula p2_3s = ((p2_d1=3) ? 1 : 0) + ((p2_d2=3) ? 1 : 0) + ((p2_d3=3) ? 1 : 0) + ((p2_d4=3) ? 1 : 0);
formula p2_4s = ((p2_d1=4) ? 1 : 0) + ((p2_d2=4) ? 1 : 0) + ((p2_d3=4) ? 1 : 0) + ((p2_d4=4) ? 1 : 0);
formula p2_5s = ((p2_d1=5) ? 1 : 0) + ((p2_d2=5) ? 1 : 0) + ((p2_d3=5) ? 1 : 0) + ((p2_d4=5) ? 1 : 0);
formula p2_6s = ((p2_d1=6) ? 1 : 0) + ((p2_d2=6) ? 1 : 0) + ((p2_d3=6) ? 1 : 0) + ((p2_d4=6) ? 1 : 0);

formula p1_pairs = ((p1_1s >= 2) ? 1 : 0) + ((p1_2s >= 2) ? 1 : 0) + ((p1_3s >= 2) ? 1 : 0) + ((p1_4s >= 2) ? 1 : 0) + ((p1_5s >= 2) ? 1 : 0) + ((p1_6s >= 2) ? 1 : 0);
formula p2_pairs = ((p2_1s >= 2) ? 1 : 0) + ((p2_2s >= 2) ? 1 : 0) + ((p2_3s >= 2) ? 1 : 0) + ((p2_4s >= 2) ? 1 : 0) + ((p2_5s >= 2) ? 1 : 0) + ((p2_6s >= 2) ? 1 : 0);

formula p1_bust = (p1_pairs >= 2) | (p1_1s >= 3) | (p1_2s >= 3) | (p1_3s >= 3) | (p1_4s >= 3) | (p1_5s >= 3) | (p1_6s >= 3);
formula p2_bust = (p2_pairs >= 2) | (p2_1s >= 3) | (p2_2s >= 3) | (p2_3s >= 3) | (p2_4s >= 3) | (p2_5s >= 3) | (p2_6s >= 3);

module player1
    p1_pos : [0..no_spaces-1] init 0;
    p1_chosen_dice : [1..no_dice] init 1;

    p1_d1 : [0..no_sides] init 0;
    p1_d2 : [0..no_sides] init 0;
    p1_d3 : [0..no_sides] init 0;
    p1_d4 : [0..no_sides] init 0;



    [pick_dice] state=0 ->
        1/2 : (p1_chosen_dice' = 3) +
        1/2 : (p1_chosen_dice' = 4);
    
    [roll_d1] state=1 & p1_chosen_dice >= 1 ->
        1/6 : (p1_d1' = 1) +
        1/6 : (p1_d1' = 2) + 
        1/6 : (p1_d1' = 3) +
        1/6 : (p1_d1' = 4) + 
        1/6 : (p1_d1' = 5) +
        1/6 : (p1_d1' = 6);

    [roll_d2] state=2 & p1_chosen_dice >= 2 ->
        1/6 : (p1_d2' = 1) +
        1/6 : (p1_d2' = 2) + 
        1/6 : (p1_d2' = 3) +
        1/6 : (p1_d2' = 4) + 
        1/6 : (p1_d2' = 5) +
        1/6 : (p1_d2' = 6);

    [roll_d2] state=2 & p1_chosen_dice < 2 -> (p1_d2' = 0);

    [roll_d3] state=3 & p1_chosen_dice >= 3 ->
        1/6 : (p1_d3' = 1) +
        1/6 : (p1_d3' = 2) + 
        1/6 : (p1_d3' = 3) +
        1/6 : (p1_d3' = 4) + 
        1/6 : (p1_d3' = 5) +
        1/6 : (p1_d3' = 6);

    [roll_d3] state=3 & p1_chosen_dice < 3 -> (p1_d3' = 0);

    [roll_d4] state=4 & p1_chosen_dice >= 4 ->
        1/6 : (p1_d4' = 1) +
        1/6 : (p1_d4' = 2) + 
        1/6 : (p1_d4' = 3) +
        1/6 : (p1_d4' = 4) + 
        1/6 : (p1_d4' = 5) +
        1/6 : (p1_d4' = 6);
    
    [roll_d4] state=4 & p1_chosen_dice < 4 -> (p1_d4' = 0);

    [move_roll] state=5 -> (p1_pos' = mod(p1_pos + (p1_bust ? 0 : (p1_d1 + p1_d2 + p1_d3 + p1_d4)), no_spaces));
endmodule


module player2
    p2_pos : [0..no_spaces-1] init 0;
    p2_chosen_dice : [1..no_dice] init 1;

    p2_d1 : [0..no_sides] init 0;
    p2_d2 : [0..no_sides] init 0;
    p2_d3 : [0..no_sides] init 0;
    p2_d4 : [0..no_sides] init 0;

    [pick_dice] state=0 ->
        1/2 : (p2_chosen_dice' = 3) +
        1/2 : (p2_chosen_dice' = 4);


    [roll_d1] state=1 & p2_chosen_dice >= 1 ->
        1/6 : (p2_d1' = 1) +
        1/6 : (p2_d1' = 2) + 
        1/6 : (p2_d1' = 3) +
        1/6 : (p2_d1' = 4) + 
        1/6 : (p2_d1' = 5) +
        1/6 : (p2_d1' = 6);

    [roll_d2] state=2 & p2_chosen_dice >= 2 ->
        1/6 : (p2_d2' = 1) +
        1/6 : (p2_d2' = 2) + 
        1/6 : (p2_d2' = 3) +
        1/6 : (p2_d2' = 4) + 
        1/6 : (p2_d2' = 5) +
        1/6 : (p2_d2' = 6);

    [roll_d2] state=2 & p2_chosen_dice < 2 -> (p2_d2' = 0);

    [roll_d3] state=3 & p2_chosen_dice >= 3 ->
        1/6 : (p2_d3' = 1) +
        1/6 : (p2_d3' = 2) + 
        1/6 : (p2_d3' = 3) +
        1/6 : (p2_d3' = 4) + 
        1/6 : (p2_d3' = 5) +
        1/6 : (p2_d3' = 6);

    [roll_d3] state=3 & p2_chosen_dice < 3 -> (p2_d3' = 0);

    [roll_d4] state=4 & p2_chosen_dice >= 4 ->
        1/6 : (p2_d4' = 1) +
        1/6 : (p2_d4' = 2) + 
        1/6 : (p2_d4' = 3) +
        1/6 : (p2_d4' = 4) + 
        1/6 : (p2_d4' = 5) +
        1/6 : (p2_d4' = 6);
    
    [roll_d4] state=4 & p2_chosen_dice < 4 -> (p2_d4' = 0);

    [move_roll] state=5 -> (p2_pos' = mod(p2_pos + (p2_bust ? 0 : (p2_d1 + p2_d2 + p2_d3 + p2_d4)), no_spaces));

endmodule


module board

    // Local state:
    // 0: choosing how many dice to roll
    // 1: roll dice1
    // 2: roll dice2
    // 3: roll dice3
    // 4: roll dice4
    // 5: Moving (if allowed!)
    // 6: Deciding winner
    // 7: game over
    state : [0..8] init 0;
    winner : [0..2] init 0;

    [pick_dice] state=0 -> (state'=1);
    [roll_d1] state=1 -> (state'=2);
    [roll_d2] state=2 -> (state'=3);
    [roll_d3] state=3 -> (state'=4);
    [roll_d4] state=4 -> (state'=5);
    [move_roll] state=5 -> (state'=6);

    [pick_wins] state=6 & !game_over -> (state'=1);
    [pick_wins] state=6 & game_over & (p1_pos = p2_pos) -> (winner' = ((p1_d1+p1_d2+p1_d3+p1_d4) > (p2_d1+p2_d2+p2_d3+p2_d4) ? 1 : 2)) & (state' = 7); // if there's a tie, whoever was ahead last round wins
    [pick_wins] state=6 & game_over & (p1_pos != p2_pos) -> (winner' = (((p1_end ? no_spaces : 0) + p1_pos) > ((p2_end ? no_spaces : 0) + p2_pos)) ? 1 : 2) & (state' = 7);

    [game_over] state=7 -> (state'=7);


endmodule

